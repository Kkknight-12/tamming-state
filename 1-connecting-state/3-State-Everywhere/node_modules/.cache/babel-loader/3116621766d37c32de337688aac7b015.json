{"ast":null,"code":"// import { connect } from 'react-redux';\n// // function component(props){\n// // }\n// // connect( [mapStateToProps], [mapDispatchToProps],\n// //     [mergeProps], [options])(...);\n// // const ConnectedComponent = connect(...)(component);\n// // import { combineReducers, createStore} from 'redux';\n// // ///////////////\n// // actions types /\n// // ///////////////\n// const TODO_ADD = 'TODO_ADD';\n// const TODO_TOGGLE = 'TODO_TOGGLE';\n// const FILTER_SET = 'FILTER_SET';\n// // //////////\n// // reducers /\n// // //////////\n// const todos = [\n//   { id: 0, name: 'learn redux' },\n//   { id: 1, name: 'learn mobx' }\n// ];\n// // 1\n// function todoReducers( state = todos, action){\n//   switch(action.type){\n//     case TODO_ADD: {\n//       return applyAddTodo( state, action );\n//     }\n//     case TODO_TOGGLE: {\n//       return applyToggleTodo( state, action );\n//     }\n//     default: return state;\n//   }\n// };\n// function applyAddTodo( state, action ){\n//   const todo = Object.assign( {}, action.todo, { completed: false } );\n//   return state.concat(todo);\n// };\n// function applyToggleTodo( state, action ){\n//   return state.map( (todo) => { \n//     return todo.id === action.todo.id \n//     ? Object.assign( {}, todo, { completed: !todo.completed })\n//     : todo\n//   });\n// };\n// // 2\n// function filterReducer( state = 'SHOW_ALL', action ){\n//   switch( action.type ){\n//     case FILTER_SET: {\n//       return applySetFilter( state, action );\n//     }\n//     default: return state;\n//   }\n// };\n// function applySetFilter( state, action ){\n//   return action.filter;\n// };\n// // //////////////////\n// // action creators  /\n// // //////////////////\n// function doAddTodo ( id, name ){\n//   return { \n//     type: TODO_ADD,\n//     todo: { id, name }\n//   }\n// };\n// function doToggleTodo( id ){\n//   return {\n//     type: TODO_TOGGLE,\n//     todo: { id }\n//   }\n// };\n// function doSetFilter( filter ){\n//   return {\n//     type: FILTER_SET,\n//     filter,\n//   }\n// };\n// // store\n// const rootReducer = combineReducers( {\n//   todoState: todoReducers,\n//   filter: filterReducer,\n// } )\n// const store = createStore( rootReducer );\n// // view layer\n// function TodoApp( { todos , onToggleTodo } ) {\n//   console.log(todos);\n//   return (\n//     <div className=\"App\">\n//       <TodoList \n//         todos = {todos}\n//         onToggleTodo = {onToggleTodo} \n//         />\n//     </div>\n//   );\n// };\n// function TodoList( { todos, onToggleTodo } ){\n//   return (\n//     <div>\n//       { todos.map( (todo) => < TodoItem \n//           key={todo.id} \n//           todo={todo} \n//           onToggleTodo={onToggleTodo}\n//           /> \n//       )}\n//     </div>\n//   )\n// }\n// function TodoItem( { todo, onToggleTodo }){\n//   const { name, id, completed } = todo;\n//   return (\n//     <div>\n//       {name}\n//       <button\n//         type=\"button\"\n//         onClick= { () => onToggleTodo( id ) }\n//         >\n//           { completed ? \"Incomplete\": \"Complete\" }\n//       </button>\n//     </div>\n//   );\n// }\n// function mapStateToProps( state ){\n//   return {\n//     todos: state.todoState,\n//   }\n// }\n// function mapDispatchToProps( dispatch ){\n//   return {\n//     onToggleTodo: id => dispatch(doToggleTodo(id))\n//   }\n// }\n// const ConnectedTodoApp = connect( mapStateToProps, mapDispatchToProps )( TodoApp );\n// export default TodoApp;","map":{"version":3,"sources":["/Users/knight/FrontEnd_Projects/React/Redux/tamming-state/1-connecting-state/3-State-Everywhere/src/app.js"],"names":[],"mappingssourcesContent":["// import { connect } from 'react-redux';\n\n\n// // function component(props){\n\n// // }\n\n// // connect( [mapStateToProps], [mapDispatchToProps],\n// //     [mergeProps], [options])(...);\n\n    \n// // const ConnectedComponent = connect(...)(component);\n// // import { combineReducers, createStore} from 'redux';\n\n// // ///////////////\n// // actions types /\n// // ///////////////\n// const TODO_ADD = 'TODO_ADD';\n// const TODO_TOGGLE = 'TODO_TOGGLE';\n// const FILTER_SET = 'FILTER_SET';\n\n// // //////////\n// // reducers /\n// // //////////\n// const todos = [\n//   { id: 0, name: 'learn redux' },\n//   { id: 1, name: 'learn mobx' }\n// ];\n// // 1\n// function todoReducers( state = todos, action){\n//   switch(action.type){\n//     case TODO_ADD: {\n//       return applyAddTodo( state, action );\n//     }\n//     case TODO_TOGGLE: {\n//       return applyToggleTodo( state, action );\n//     }\n//     default: return state;\n//   }\n// };\n\n// function applyAddTodo( state, action ){\n//   const todo = Object.assign( {}, action.todo, { completed: false } );\n\n//   return state.concat(todo);\n// };\n\n// function applyToggleTodo( state, action ){\n//   return state.map( (todo) => { \n//     return todo.id === action.todo.id \n//     ? Object.assign( {}, todo, { completed: !todo.completed })\n//     : todo\n//   });\n// };\n\n// // 2\n// function filterReducer( state = 'SHOW_ALL', action ){\n//   switch( action.type ){\n//     case FILTER_SET: {\n//       return applySetFilter( state, action );\n//     }\n//     default: return state;\n//   }\n// };\n\n// function applySetFilter( state, action ){\n//   return action.filter;\n// };\n\n// // //////////////////\n// // action creators  /\n// // //////////////////\n// function doAddTodo ( id, name ){\n//   return { \n//     type: TODO_ADD,\n//     todo: { id, name }\n//   }\n// };\n\n// function doToggleTodo( id ){\n//   return {\n//     type: TODO_TOGGLE,\n//     todo: { id }\n//   }\n// };\n\n// function doSetFilter( filter ){\n//   return {\n//     type: FILTER_SET,\n//     filter,\n//   }\n// };\n\n// // store\n// const rootReducer = combineReducers( {\n//   todoState: todoReducers,\n//   filter: filterReducer,\n// } )\n\n// const store = createStore( rootReducer );\n\n// // view layer\n\n// function TodoApp( { todos , onToggleTodo } ) {\n//   console.log(todos);\n\n//   return (\n//     <div className=\"App\">\n//       <TodoList \n//         todos = {todos}\n//         onToggleTodo = {onToggleTodo} \n//         />\n//     </div>\n//   );\n// };\n\n// function TodoList( { todos, onToggleTodo } ){\n//   return (\n//     <div>\n//       { todos.map( (todo) => < TodoItem \n//           key={todo.id} \n//           todo={todo} \n//           onToggleTodo={onToggleTodo}\n//           /> \n//       )}\n//     </div>\n//   )\n// }\n\n// function TodoItem( { todo, onToggleTodo }){\n//   const { name, id, completed } = todo;\n//   return (\n//     <div>\n//       {name}\n//       <button\n//         type=\"button\"\n//         onClick= { () => onToggleTodo( id ) }\n//         >\n//           { completed ? \"Incomplete\": \"Complete\" }\n//       </button>\n//     </div>\n//   );\n// }\n\n// function mapStateToProps( state ){\n//   return {\n//     todos: state.todoState,\n//   }\n// }\n// function mapDispatchToProps( dispatch ){\n//   return {\n//     onToggleTodo: id => dispatch(doToggleTodo(id))\n//   }\n// }\n\n// const ConnectedTodoApp = connect( mapStateToProps, mapDispatchToProps )( TodoApp );\n\n// export default TodoApp;\n"]},"metadata":{},"sourceType":"module"}