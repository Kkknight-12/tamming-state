[{"/Users/knight/FrontEnd_Projects/React/Redux/tamming-state/1-connecting-state/2-provider-connect/src/index.js":"1","/Users/knight/FrontEnd_Projects/React/Redux/tamming-state/1-connecting-state/3-State-Everywhere/src/index.js":"2","/Users/knight/FrontEnd_Projects/React/Redux/tamming-state/1-connecting-state/3-State-Everywhere/src/app.js":"3"},{"size":4037,"mtime":1619804564751,"results":"4","hashOfConfig":"5"},{"size":3187,"mtime":1619841990997,"results":"6","hashOfConfig":"7"},{"size":3033,"mtime":1619840410931,"results":"8","hashOfConfig":"7"},{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"pgthwm",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},"g8kndf",{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/knight/FrontEnd_Projects/React/Redux/tamming-state/1-connecting-state/2-provider-connect/src/index.js",["16","17"],"/Users/knight/FrontEnd_Projects/React/Redux/tamming-state/1-connecting-state/3-State-Everywhere/src/index.js",["18","19"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { combineReducers, createStore} from 'redux';\nimport { Provider, connect } from 'react-redux';\n// import TodoApp from \"./app\";\n\n/* \nWhen using redux with react , Provider component should be top \nlevel component of your appliaction.\n\nComponent has one prop as input: redux store that you created \nwith createStore();\n*/\nimport './index.css';\n\n// ///////////////\n// actions types /\n// ///////////////\nconst TODO_ADD = 'TODO_ADD';\nconst TODO_TOGGLE = 'TODO_TOGGLE';\nconst FILTER_SET = 'FILTER_SET';\n\n// //////////\n// reducers /\n// //////////\n\n// initial state\nconst todos = [\n  { id: 0, name: 'learn redux' },\n  { id: 1, name: 'learn mobx' }\n];\n// reducer 1\nfunction todoReducer( state = todos, action){\n  switch(action.type){\n    case TODO_ADD: {\n      return applyAddTodo( state, action );\n    }\n    case TODO_TOGGLE: {\n      return applyToggleTodo( state, action );\n    }\n    default: return state;\n  }\n};\n\nfunction applyAddTodo( state, action ){\n  const todo = Object.assign( {}, action.todo, { completed: false } );\n\n  return state.concat(todo);\n};\n\nfunction applyToggleTodo( state, action ){\n  return state.map( (todo) => { \n    return todo.id === action.todo.id \n    ? Object.assign( {}, todo, { completed: !todo.completed })\n    : todo\n  });\n};\n\n// reducer 2\nfunction filterReducer( state = 'SHOW_ALL', action ){\n  switch( action.type ){\n    case FILTER_SET: {\n      return applySetFilter( state, action );\n    }\n    default: return state;\n  }\n};\n\nfunction applySetFilter( state, action ){\n  return action.filter;\n};\n\n// //////////////////\n// action creators  /\n// //////////////////\nfunction doAddTodo ( id, name ){\n  return { \n    type: TODO_ADD,\n    todo: { id, name }\n  }\n};\n\nfunction doToggleTodo( id ){\n  return {\n    type: TODO_TOGGLE,\n    todo: { id }\n  }\n};\n\nfunction doSetFilter( filter ){\n  return {\n    type: FILTER_SET,\n    filter,\n  }\n};\n\n// store\nconst rootReducer = combineReducers( {\n  todoState: todoReducer,\n  filter: filterReducer,\n} )\n\nconst store = createStore( rootReducer );\n\n// //////////////\n// view layer  /\n// ////////////\n\n// components\nfunction TodoApp(){\n  return <ConnectedTodoList/>\n}\n\nfunction TodoList( { todos } ){\n  return (\n    <div>\n      {todos.map( todo => <ConnectedTodoItem key={todo.id} todo={todo}/> )}\n    </div>\n  )\n}\n\nfunction TodoItem( { todo, onToggleTodo } ){\n  const { name, id, completed } = todo;\n  return (\n    <div>\n      {name}\n      <button\n        type=\"button\"\n        onClick= { () => onToggleTodo( id ) }\n        >\n          { completed ? \"Incomplete\": \"Complete\" }\n      </button>\n    </div>\n  );\n}\n\nfunction mapStateToProps( state ){\n  return {\n    todos: state.todoState,\n  }\n}\nfunction mapDispatchToProps( dispatch ){\n  return {\n    onToggleTodo: id => dispatch(doToggleTodo(id))\n  }\n}\n\n// const ConnectedTodoApp = connect( mapStateToProps, mapDispatchToProps )( TodoApp );\n\nconst ConnectedTodoList = connect( mapStateToProps )( TodoList );\nconst ConnectedTodoItem = connect( null, mapDispatchToProps )( TodoItem );\n\n// ////////\nReactDOM.render(\n    <Provider store = {store} >\n    <TodoApp/>\n    </Provider>,\n  document.getElementById('root')\n);\n","/Users/knight/FrontEnd_Projects/React/Redux/tamming-state/1-connecting-state/3-State-Everywhere/src/app.js",["20","21","22"],{"ruleId":"23","severity":1,"message":"24","line":87,"column":10,"nodeType":"25","messageId":"26","endLine":87,"endColumn":19},{"ruleId":"23","severity":1,"message":"27","line":101,"column":10,"nodeType":"25","messageId":"26","endLine":101,"endColumn":21},{"ruleId":"23","severity":1,"message":"24","line":76,"column":10,"nodeType":"25","messageId":"26","endLine":76,"endColumn":19},{"ruleId":"23","severity":1,"message":"27","line":90,"column":10,"nodeType":"25","messageId":"26","endLine":90,"endColumn":21},{"ruleId":"23","severity":1,"message":"24","line":65,"column":10,"nodeType":"25","messageId":"26","endLine":65,"endColumn":19},{"ruleId":"23","severity":1,"message":"27","line":79,"column":10,"nodeType":"25","messageId":"26","endLine":79,"endColumn":21},{"ruleId":"23","severity":1,"message":"28","line":92,"column":7,"nodeType":"25","messageId":"26","endLine":92,"endColumn":12},"no-unused-vars","'doAddTodo' is defined but never used.","Identifier","unusedVar","'doSetFilter' is defined but never used.","'store' is assigned a value but never used."]