[{"/Users/knight/FrontEnd_Projects/React/Redux/tamming-state/1-connecting-state/2-provider-connect/src/index.js":"1","/Users/knight/FrontEnd_Projects/React/Redux/tamming-state/1-connecting-state/3-State-Everywhere/src/index.js":"2"},{"size":4037,"mtime":1619804564751,"results":"3","hashOfConfig":"4"},{"size":4119,"mtime":1620012802709,"results":"5","hashOfConfig":"6"},{"filePath":"7","messages":"8","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"pgthwm",{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"g8kndf","/Users/knight/FrontEnd_Projects/React/Redux/tamming-state/1-connecting-state/2-provider-connect/src/index.js",["12","13"],"/Users/knight/FrontEnd_Projects/React/Redux/tamming-state/1-connecting-state/3-State-Everywhere/src/index.js",["14","15"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { combineReducers, createStore} from 'redux';\nimport { Provider, connect } from 'react-redux';\n// import TodoApp from \"./app\";\n\n/* \nWhen using redux with react , Provider component should be top \nlevel component of your appliaction.\n\nComponent has one prop as input: redux store that you created \nwith createStore();\n*/\nimport './index.css';\n\n// ///////////////\n// actions types /\n// ///////////////\nconst TODO_ADD = 'TODO_ADD';\nconst TODO_TOGGLE = 'TODO_TOGGLE';\nconst FILTER_SET = 'FILTER_SET';\n\n// //////////\n// reducers /\n// //////////\n\n// initial state\nconst todos = [\n  { id: 0, name: 'learn redux' },\n  { id: 1, name: 'learn mobx' }\n];\n\n// reducer 1\nfunction todoReducer( state = todos, action){\n  switch(action.type){\n    case TODO_ADD: {\n      return applyAddTodo( state, action );\n    }\n    case TODO_TOGGLE: {\n      return applyToggleTodo( state, action );\n    }\n    default: return state;\n  }\n};\n\nfunction applyAddTodo( state, action ){\n  const todo = Object.assign( {}, action.todo, { completed: false } );\n\n  return state.concat(todo);\n};\n\nfunction applyToggleTodo( state, action ){\n  return state.map( (todo) => { \n    return todo.id === action.todo.id \n    ? Object.assign( {}, todo, { completed: !todo.completed })\n    : todo\n  });\n};\n\n// reducer 2\nfunction filterReducer( state = 'SHOW_ALL', action ){\n  switch( action.type ){\n    case FILTER_SET: {\n      return applySetFilter( state, action );\n    }\n    default: return state;\n  }\n};\n\nfunction applySetFilter( state, action ){\n  return action.filter;\n};\n\n// /////////////////\n// action creators /\n// /////////////////\nfunction doAddTodo ( id, name ){\n  return { \n    type: TODO_ADD,\n    todo: { id, name }\n  }\n};\n\nfunction doToggleTodo( id ){\n  return {\n    type: TODO_TOGGLE,\n    todo: { id }\n  }\n};\n\nfunction doSetFilter( filter ){\n  return {\n    type: FILTER_SET,\n    filter,\n  }\n};\n\n// store\nconst rootReducer = combineReducers( {\n  todoState: todoReducer,\n  filter: filterReducer,\n} )\n\nconst store = createStore( rootReducer );\n\n// ////////////\n// view layer /\n// ////////////\n\n// components\nfunction TodoApp(){\n  console.log(\"TodoApp\")\n  // ConnectedTodoList will trigger TodoList function\n  // but with reducer in it.\n  // If you return function TodoList you won't be passing reducer, try and see.\n  return <ConnectedTodoList/>\n}\n\n// sending reducer to the component it is needed\nfunction TodoList( { todos } ){\n  console.log(\"TodoList\")\n  console.log(todos)\n  /* \n  [ {id: 0, name: \"learn redux\"}, {id: 1, name: \"learn mobx\"} ]\n  */\n  return (\n    <div>\n      {/* \n        here we are passing another connect component ConnectedTodoItem ( trigger TodoItem function ) which has actions in it, you will be able to extract action when calling TodoItem function  \n      */}\n      { todos.map( todo => <ConnectedTodoItem key={todo.id} todo={todo}/> ) }\n    </div>\n  )\n}\n\n// now when TodoItem is triggered by Connect component ConnectedTodoItem\n// we will also be getting action onToggleTodo ( which is our doToggleTodo action ) \n// which we are extracting here. \nfunction TodoItem( { todo, onToggleTodo } ){\n  const { name, id, completed } = todo;\n  console.log(\"TodoItem\");\n  return (\n    <div>\n      {name}\n      <button\n        type=\"button\"\n        onClick= { () => onToggleTodo( id ) }\n        >\n          { completed ? \"Incomplete\": \"Complete\" }\n      </button>\n    </div>\n  );\n}\n\nfunction mapStateToProps( state ){\n  return {\n    todos: state.todoState,\n  }\n}\n\nfunction mapDispatchToProps( dispatch ){\n  return {\n    onToggleTodo: id => dispatch(doToggleTodo(id))\n  }\n}\n\n// ////////////\n// Connecting /\n// ////////////\n\n// Reducer and Component\n// creating connect component variables so that we can directly pass reducer\n// and action directly when and where needed.\nconst ConnectedTodoList = connect( mapStateToProps )( TodoList );\n\n// Action and Component\nconst ConnectedTodoItem = connect( null, mapDispatchToProps )( TodoItem );\n\n// /////////////\nReactDOM.render(\n    <Provider store = {store} >\n      <TodoApp/>\n    </Provider>,\n  document.getElementById('root')\n);",{"ruleId":"16","severity":1,"message":"17","line":87,"column":10,"nodeType":"18","messageId":"19","endLine":87,"endColumn":19},{"ruleId":"16","severity":1,"message":"20","line":101,"column":10,"nodeType":"18","messageId":"19","endLine":101,"endColumn":21},{"ruleId":"16","severity":1,"message":"17","line":77,"column":10,"nodeType":"18","messageId":"19","endLine":77,"endColumn":19},{"ruleId":"16","severity":1,"message":"20","line":91,"column":10,"nodeType":"18","messageId":"19","endLine":91,"endColumn":21},"no-unused-vars","'doAddTodo' is defined but never used.","Identifier","unusedVar","'doSetFilter' is defined but never used."]